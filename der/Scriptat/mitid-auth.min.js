!function(r) {
    "use strict";
    var t = function() {
        var a = !1,
            o = null;
        this.withTransToken = function(t) {
            o = t, a = !0
        }, this.prepareXhr = function(t) {
            a && t.setRequestHeader("X-Signicat-Trans-Token", o)
        }, this.navigateToInternal = function(t, n) {
            if (a && !n) { // Vérifie s'il n'y a pas de callback spécifié
                console.log("Navigation automatique désactivée"); // Affiche un message dans la console pour le débogage
                return;
            }
            if (a) {
                var e = r.document.createElement("input");
                e.setAttribute("type", "hidden"), e.setAttribute("name", "transtoken"), e.setAttribute("value", o);
                var i = r.document.createElement("form");
                return i.setAttribute("method", "POST"), i.setAttribute("action", t), i.setAttribute("style", "display: none;"), i.appendChild(e), r.document.getElementsByTagName("body")[0].appendChild(i), void i.submit()
            }
            n ? n(t) : r.document.location.href = t
        }, this.getUseTransToken = function() {
            return a
        }, this.getTransToken = function() {
            return o
        }
    };
    "function" == typeof r.define && r.define.amd ? r.define(function() {
        return t
    }) : void 0 !== r.module && r.module.exports ? r.module.exports = t : r.TransAuth = t
}(this);
var SignicatClient = function() {
    "use strict";
    var r, c, i, t = function(t, n, e) {
        r = t, c = n, i = e
    };
    return t.prototype = {
        constructor: t,
        post: function(t, n, e, i) {
            var a = r + t,
                o = new XMLHttpRequest;
            o.open("POST", a, !0), c && c.prepareXhr(o), o.setRequestHeader("Accept", "application/json"), o.onreadystatechange = function() {
                if (4 === o.readyState)
                    if (200 === o.status) try {
                        var t = o.responseText || "{}",
                            n = JSON.parse(t);
                        e(n)
                    } catch (t) {
                        i(t)
                    } else i(o.status)
            }, o.send(n)
        },
        goToPage: function(t) {
            if (i) {
                var n = {
                    action: "navigate",
                    relativePath: t
                };
                window.parent.postMessage(n, "*")
            } else c ? c.navigateToInternal(r + t) : document.location.href = r + t
        }
    }, t
}();

function unicodeDecodeB64(t) {
    return decodeURIComponent(atob(t))
}
var dataset = document.querySelector("#blpParams").dataset;
window.profileConfig = JSON.parse(unicodeDecodeB64(dataset.profileConfig)), window.methodContainerId = "blp-container";
var signicat = signicat || {};
signicat.baseUrl = dataset.baseUrl, signicat.initAuthPath = dataset.initAuthPath, signicat.authCodePath = dataset.authCodePath, signicat.finalizeAuthPath = dataset.finalizeAuthPath, signicat.cancelPath = dataset.cancelPath, signicat.errorPath = dataset.errorPath, signicat.errorLogPath = dataset.errorLogPath, signicat.transTokenEnabled = "true" === dataset.transTokenEnabled, signicat.postMsgToParent = signicat.transTokenEnabled, signicat.transToken = dataset.transToken, signicat.transAuth = new TransAuth, signicat.transTokenEnabled && signicat.transAuth.withTransToken(signicat.transToken);
var client = new SignicatClient(signicat.baseUrl, signicat.transAuth, signicat.postMsgToParent);

function initializeAuthentication() {
    client.post(signicat.initAuthPath, {}, initializeClient, onError("initializeAuthentication"))
}

function logError(t, n) {
    var e = new FormData;
    e.append("origin", t), e.append("reason", JSON.stringify(n)), client.post(signicat.errorLogPath, e, goToErrorPage, goToErrorPage)
}

function onError(n) {
    return function(t) {
        logError(n, t)
    }
}

function goToErrorPage() {
    client.goToPage(signicat.errorPath)
}

function onAuthCodeSuccess() {
    client.goToPage(signicat.finalizeAuthPath)
}

function initializeClient(n) {
    var e = function(t) {
            return !0
        },
        i = function(t) {
            var n = new FormData;
            n.append("authCode", t), client.post(signicat.authCodePath, n, onAuthCodeSuccess, onError("InitializeCoreClient.finalizationCallback"))
        },
        a = function() {
            client.goToPage(signicat.cancelPath)
        },
        o = function(t) {
            onError("InitializeCoreClient.errorCallback")(t)
        },
        t = document.createElement("script");
    t.type = "application/javascript", t.async = !0, t.crossOrigin = "anonymous", t.onload = function(t) {
        InitializeCoreClient({
            domReference: "coreClientParent",
            identityClaimCallback: e,
            finalizationCallback: i,
            cancelAuthenticationCallback: a,
            errorCallback: o,
            aux: n.aux
        })
    }, t.onerror = onError("InitializeCoreClient.onerror"), t.src = n.coreClientUrl, t.id = "mitidCoreClient", t.integrity = n.algorithm + "-" + n.checksum, document.getElementsByTagName("head")[0].appendChild(t)
}
document.addEventListener("DOMContentLoaded", function(t) {
    initializeAuthentication()
});